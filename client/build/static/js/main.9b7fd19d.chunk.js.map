{"version":3,"sources":["utils/auth.js","utils/mutations.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","LOGIN_USER","gql","SIGNUP_USER","SAVE_BOOK","DELETE_BOOK","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","log","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","QUERY_ME","SavedBooks","useQuery","data","loading","userData","setUserData","me","deleteBook","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","signup","validated","showAlert","setShowAlert","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b7fd19d.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SIGNUP_USER = gql`\r\n  mutation signup($email: String!, $username: String!, $password: String!) {\r\n    signup(email: $email, password: $password, username: $username) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($title: String!, $description: String, $image: String!, $authors: [String], $bookId: ID!) {\r\n    saveBook(title: $title, description: $description, image: $image, authors: $authors, bookId: $bookId) {\r\n      _id\r\n      username\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        title\r\n        description\r\n        image\r\n        authors\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_BOOK = gql`\r\n  mutation deleteBook($bookId: ID!) {\r\n    deleteBook(bookId: $bookId) {\r\n      username\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\n\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  const [saveBook] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map(book => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async bookId => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find(book => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      if (!bookToSave.description) {\n        bookToSave.description = 'No description provided';\n      }\n      console.log(bookToSave);\n      saveBook({\n        variables: { ...bookToSave },\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={e => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>{searchedBooks.length ? `Viewing ${searchedBooks.length} results:` : 'Search for a book to begin'}</h2>\n        <CardColumns>\n          {searchedBooks.map(book => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant=\"top\" /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(savedBookId => savedBookId === book.bookId)}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(savedBookId => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_ME = gql`\r\n  {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        title\r\n        bookId\r\n        image\r\n        description\r\n        authors\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport { QUERY_ME } from '../utils/queries';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { DELETE_BOOK } from '../utils/mutations';\n\nconst SavedBooks = () => {\n  const { data, loading } = useQuery(QUERY_ME);\n  // const userData = data?.me || {}\n  const [userData, setUserData] = useState({});\n\n  useEffect(() => {\n    if (data) {\n      setUserData(data.me);\n    }\n  }, [data, loading]);\n\n  const [deleteBook] = useMutation(DELETE_BOOK);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async bookId => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      deleteBook({\n        variables: { bookId },\n      });\n      removeBookId(bookId);\n      const savedBooks = userData.savedBooks.filter(book => book.bookId !== bookId);\n      setUserData({ ...userData, savedBooks });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading || !userData.savedBooks) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map(book => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant=\"top\" /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className=\"btn-block btn-danger\" onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { SIGNUP_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [signup, { error }] = useMutation(SIGNUP_USER);\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await signup({\n        variables: { ...userFormData },\n      });\n      Auth.login(data.signup.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant=\"danger\">\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\n\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login] = useMutation(LOGIN_USER);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant=\"danger\">\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button disabled={!(userFormData.email && userFormData.password)} type=\"submit\" variant=\"success\">\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Container fluid>\n          <Navbar.Brand as={Link} to=\"/\">\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link as={Link} to=\"/\">\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to=\"/saved\">\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal size=\"lg\" show={showModal} onHide={() => setShowModal(false)} aria-labelledby=\"signup-modal\">\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey=\"login\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"pills\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"login\">Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"signup\">Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"login\">\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\nimport { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\nimport Auth from './utils/auth';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = Auth.getToken();\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache({}),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Routes>\n            <Route path=\"/\" element={<SearchBooks />} />\n            <Route path=\"/saved\" element={<SavedBooks />} />\n            <Route path=\"*\" element={<h1 className=\"display-2\">Wrong page!</h1>} />\n          </Routes>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}